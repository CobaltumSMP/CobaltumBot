package cobaltumsmp.discordbot.module.ticketsystem.auto;

import cobaltumsmp.discordbot.module.ticketsystem.Ticket;
import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

/**
 * Class _TicketConfig was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
@SuppressWarnings("checkstyle:TypeName")
public abstract class _TicketConfig extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TICKET_CONFIG_ID_PK_COLUMN = "ticketConfigId";

    public static final Property<Long> CLOSED_TICKET_CATEGORY_ID = Property.create(
            "closedTicketCategoryId", Long.class);
    public static final Property<Long> MESSAGE_CHANNEL_ID = Property.create(
            "messageChannelId", Long.class);
    public static final Property<Long> MESSAGE_ID = Property.create(
            "messageId", Long.class);
    public static final Property<String> ROLES = Property.create(
            "roles", String.class);
    public static final Property<Long> TICKET_CATEGORY_ID = Property.create(
            "ticketCategoryId", Long.class);
    public static final Property<List<Ticket>> TICKETS = Property.create(
            "tickets", List.class);

    protected long closedTicketCategoryId;
    protected long messageChannelId;
    protected long messageId;
    protected String roles;
    protected long ticketCategoryId;

    protected Object tickets;

    /**
     * Set the closed ticket category ID.
     */
    public void setClosedTicketCategoryId(long closedTicketCategoryId) {
        beforePropertyWrite("closedTicketCategoryId", this.closedTicketCategoryId,
                closedTicketCategoryId);
        this.closedTicketCategoryId = closedTicketCategoryId;
    }

    public long getClosedTicketCategoryId() {
        beforePropertyRead("closedTicketCategoryId");
        return this.closedTicketCategoryId;
    }

    public void setMessageChannelId(long messageChannelId) {
        beforePropertyWrite("messageChannelId", this.messageChannelId, messageChannelId);
        this.messageChannelId = messageChannelId;
    }

    public long getMessageChannelId() {
        beforePropertyRead("messageChannelId");
        return this.messageChannelId;
    }

    public void setMessageId(long messageId) {
        beforePropertyWrite("messageId", this.messageId, messageId);
        this.messageId = messageId;
    }

    public long getMessageId() {
        beforePropertyRead("messageId");
        return this.messageId;
    }

    public void setRoles(String roles) {
        beforePropertyWrite("roles", this.roles, roles);
        this.roles = roles;
    }

    public String getRoles() {
        beforePropertyRead("roles");
        return this.roles;
    }

    public void setTicketCategoryId(long ticketCategoryId) {
        beforePropertyWrite("ticketCategoryId", this.ticketCategoryId, ticketCategoryId);
        this.ticketCategoryId = ticketCategoryId;
    }

    public long getTicketCategoryId() {
        beforePropertyRead("ticketCategoryId");
        return this.ticketCategoryId;
    }

    public void addToTickets(Ticket obj) {
        addToManyTarget("tickets", obj, true);
    }

    public void removeFromTickets(Ticket obj) {
        removeToManyTarget("tickets", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ticket> getTickets() {
        return (List<Ticket>) readProperty("tickets");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if (propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "closedTicketCategoryId":
                return this.closedTicketCategoryId;
            case "messageChannelId":
                return this.messageChannelId;
            case "messageId":
                return this.messageId;
            case "roles":
                return this.roles;
            case "ticketCategoryId":
                return this.ticketCategoryId;
            case "tickets":
                return this.tickets;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if (propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "closedTicketCategoryId":
                this.closedTicketCategoryId = val == null ? 0 : (long) val;
                break;
            case "messageChannelId":
                this.messageChannelId = val == null ? 0 : (long) val;
                break;
            case "messageId":
                this.messageId = val == null ? 0 : (long) val;
                break;
            case "roles":
                this.roles = (String) val;
                break;
            case "ticketCategoryId":
                this.ticketCategoryId = val == null ? 0 : (long) val;
                break;
            case "tickets":
                this.tickets = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.closedTicketCategoryId);
        out.writeLong(this.messageChannelId);
        out.writeLong(this.messageId);
        out.writeObject(this.roles);
        out.writeLong(this.ticketCategoryId);
        out.writeObject(this.tickets);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.closedTicketCategoryId = in.readLong();
        this.messageChannelId = in.readLong();
        this.messageId = in.readLong();
        this.roles = (String) in.readObject();
        this.ticketCategoryId = in.readLong();
        this.tickets = in.readObject();
    }

}
